// Code generated by ogen, DO NOT EDIT.

package api

// Ref: #/components/schemas/BackendService
type BackendService struct {
	JsonrpcURL OptString `json:"jsonrpc_url"`
}

// GetJsonrpcURL returns the value of JsonrpcURL.
func (s *BackendService) GetJsonrpcURL() OptString {
	return s.JsonrpcURL
}

// SetJsonrpcURL sets the value of JsonrpcURL.
func (s *BackendService) SetJsonrpcURL(val OptString) {
	s.JsonrpcURL = val
}

// Ref: #/components/schemas/Config
type Config struct {
	Version           OptVersion        `json:"version"`
	BackendEntryPoint OptBackendService `json:"backend_entry_point"`
	Assets            OptResource       `json:"assets"`
	Definitions       OptResource       `json:"definitions"`
	Notifications     OptBackendService `json:"notifications"`
}

// GetVersion returns the value of Version.
func (s *Config) GetVersion() OptVersion {
	return s.Version
}

// GetBackendEntryPoint returns the value of BackendEntryPoint.
func (s *Config) GetBackendEntryPoint() OptBackendService {
	return s.BackendEntryPoint
}

// GetAssets returns the value of Assets.
func (s *Config) GetAssets() OptResource {
	return s.Assets
}

// GetDefinitions returns the value of Definitions.
func (s *Config) GetDefinitions() OptResource {
	return s.Definitions
}

// GetNotifications returns the value of Notifications.
func (s *Config) GetNotifications() OptBackendService {
	return s.Notifications
}

// SetVersion sets the value of Version.
func (s *Config) SetVersion(val OptVersion) {
	s.Version = val
}

// SetBackendEntryPoint sets the value of BackendEntryPoint.
func (s *Config) SetBackendEntryPoint(val OptBackendService) {
	s.BackendEntryPoint = val
}

// SetAssets sets the value of Assets.
func (s *Config) SetAssets(val OptResource) {
	s.Assets = val
}

// SetDefinitions sets the value of Definitions.
func (s *Config) SetDefinitions(val OptResource) {
	s.Definitions = val
}

// SetNotifications sets the value of Notifications.
func (s *Config) SetNotifications(val OptBackendService) {
	s.Notifications = val
}

func (*Config) configGetRes() {}

type ConfigGetBadRequest struct {
	Error OptConfigGetBadRequestError `json:"error"`
}

// GetError returns the value of Error.
func (s *ConfigGetBadRequest) GetError() OptConfigGetBadRequestError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ConfigGetBadRequest) SetError(val OptConfigGetBadRequestError) {
	s.Error = val
}

func (*ConfigGetBadRequest) configGetRes() {}

type ConfigGetBadRequestError struct {
	Code    OptInt    `json:"code"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConfigGetBadRequestError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConfigGetBadRequestError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConfigGetBadRequestError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConfigGetBadRequestError) SetMessage(val OptString) {
	s.Message = val
}

type ConfigGetNotFound struct {
	Error OptConfigGetNotFoundError `json:"error"`
}

// GetError returns the value of Error.
func (s *ConfigGetNotFound) GetError() OptConfigGetNotFoundError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ConfigGetNotFound) SetError(val OptConfigGetNotFoundError) {
	s.Error = val
}

func (*ConfigGetNotFound) configGetRes() {}

type ConfigGetNotFoundError struct {
	Code    OptInt    `json:"code"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConfigGetNotFoundError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConfigGetNotFoundError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConfigGetNotFoundError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConfigGetNotFoundError) SetMessage(val OptString) {
	s.Message = val
}

// NewOptBackendService returns new OptBackendService with value set to v.
func NewOptBackendService(v BackendService) OptBackendService {
	return OptBackendService{
		Value: v,
		Set:   true,
	}
}

// OptBackendService is optional BackendService.
type OptBackendService struct {
	Value BackendService
	Set   bool
}

// IsSet returns true if OptBackendService was set.
func (o OptBackendService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBackendService) Reset() {
	var v BackendService
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBackendService) SetTo(v BackendService) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBackendService) Get() (v BackendService, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBackendService) Or(d BackendService) BackendService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigGetBadRequestError returns new OptConfigGetBadRequestError with value set to v.
func NewOptConfigGetBadRequestError(v ConfigGetBadRequestError) OptConfigGetBadRequestError {
	return OptConfigGetBadRequestError{
		Value: v,
		Set:   true,
	}
}

// OptConfigGetBadRequestError is optional ConfigGetBadRequestError.
type OptConfigGetBadRequestError struct {
	Value ConfigGetBadRequestError
	Set   bool
}

// IsSet returns true if OptConfigGetBadRequestError was set.
func (o OptConfigGetBadRequestError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigGetBadRequestError) Reset() {
	var v ConfigGetBadRequestError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigGetBadRequestError) SetTo(v ConfigGetBadRequestError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigGetBadRequestError) Get() (v ConfigGetBadRequestError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigGetBadRequestError) Or(d ConfigGetBadRequestError) ConfigGetBadRequestError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigGetNotFoundError returns new OptConfigGetNotFoundError with value set to v.
func NewOptConfigGetNotFoundError(v ConfigGetNotFoundError) OptConfigGetNotFoundError {
	return OptConfigGetNotFoundError{
		Value: v,
		Set:   true,
	}
}

// OptConfigGetNotFoundError is optional ConfigGetNotFoundError.
type OptConfigGetNotFoundError struct {
	Value ConfigGetNotFoundError
	Set   bool
}

// IsSet returns true if OptConfigGetNotFoundError was set.
func (o OptConfigGetNotFoundError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigGetNotFoundError) Reset() {
	var v ConfigGetNotFoundError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigGetNotFoundError) SetTo(v ConfigGetNotFoundError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigGetNotFoundError) Get() (v ConfigGetNotFoundError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigGetNotFoundError) Or(d ConfigGetNotFoundError) ConfigGetNotFoundError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResource returns new OptResource with value set to v.
func NewOptResource(v Resource) OptResource {
	return OptResource{
		Value: v,
		Set:   true,
	}
}

// OptResource is optional Resource.
type OptResource struct {
	Value Resource
	Set   bool
}

// IsSet returns true if OptResource was set.
func (o OptResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResource) Reset() {
	var v Resource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResource) SetTo(v Resource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResource) Get() (v Resource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResource) Or(d Resource) Resource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSemVer returns new OptSemVer with value set to v.
func NewOptSemVer(v SemVer) OptSemVer {
	return OptSemVer{
		Value: v,
		Set:   true,
	}
}

// OptSemVer is optional SemVer.
type OptSemVer struct {
	Value SemVer
	Set   bool
}

// IsSet returns true if OptSemVer was set.
func (o OptSemVer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSemVer) Reset() {
	var v SemVer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSemVer) SetTo(v SemVer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSemVer) Get() (v SemVer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSemVer) Or(d SemVer) SemVer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVersion returns new OptVersion with value set to v.
func NewOptVersion(v Version) OptVersion {
	return OptVersion{
		Value: v,
		Set:   true,
	}
}

// OptVersion is optional Version.
type OptVersion struct {
	Value Version
	Set   bool
}

// IsSet returns true if OptVersion was set.
func (o OptVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVersion) Reset() {
	var v Version
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVersion) SetTo(v Version) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVersion) Get() (v Version, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVersion) Or(d Version) Version {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Resource
type Resource struct {
	// Resource version in SemVer format (MAJOR.MINOR.PATCH).
	Version OptSemVer `json:"version"`
	Hash    OptString `json:"hash"`
	Urls    []string  `json:"urls"`
}

// GetVersion returns the value of Version.
func (s *Resource) GetVersion() OptSemVer {
	return s.Version
}

// GetHash returns the value of Hash.
func (s *Resource) GetHash() OptString {
	return s.Hash
}

// GetUrls returns the value of Urls.
func (s *Resource) GetUrls() []string {
	return s.Urls
}

// SetVersion sets the value of Version.
func (s *Resource) SetVersion(val OptSemVer) {
	s.Version = val
}

// SetHash sets the value of Hash.
func (s *Resource) SetHash(val OptString) {
	s.Hash = val
}

// SetUrls sets the value of Urls.
func (s *Resource) SetUrls(val []string) {
	s.Urls = val
}

type SemVer string

// Ref: #/components/schemas/Version
type Version struct {
	// Required version in SemVer format (MAJOR.MINOR.PATCH).
	Required OptSemVer `json:"required"`
	// Store version in SemVer format (MAJOR.MINOR.PATCH).
	Store OptSemVer `json:"store"`
}

// GetRequired returns the value of Required.
func (s *Version) GetRequired() OptSemVer {
	return s.Required
}

// GetStore returns the value of Store.
func (s *Version) GetStore() OptSemVer {
	return s.Store
}

// SetRequired sets the value of Required.
func (s *Version) SetRequired(val OptSemVer) {
	s.Required = val
}

// SetStore sets the value of Store.
func (s *Version) SetStore(val OptSemVer) {
	s.Store = val
}
